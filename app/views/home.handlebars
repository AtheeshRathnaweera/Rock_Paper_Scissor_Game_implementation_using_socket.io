<div class="body-holder">
  <div class="alerts-holder"></div>

  <div class="user-search-holder">
    <form class="search-user-form">
      <div class="col-auto">
        <div class="input-group">
          <input type="text" class="form-control" id="inlineFormInputGroup" placeholder="Search user">
          <div class="input-group-prepend">
            <div class="input-group-text">
              <img src="/icons/search.png" />
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>

  <div class="users-section">
    <div class="row" style="margin: 0 !important; padding: 0 !important;" id="users-row">

    </div>

  </div>

</div>

<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#gameLoadingModal" data-backdrop='static'
  data-keyboard='false'>
  Launch load modal
</button>

<div class="modal fade" id="gameLoadingModal" tabindex="-1" role="dialog" aria-labelledby="gameLoadingModal"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="card vertical-center" style="width: 100% !important;">
        <div style="margin: auto;">
          <div class="message">Please wait till your opponent join !</div>
          <div class="loader">
            <div>
              <span></span>
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
          <div style="width: 100%; text-align: center;">
            <button class="btn btn-primary btn-round">
              Leave Game
            </button>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header" style="margin: 0 0 4vh 0; border: 1px solid lightgrey !important;">
        <div class="row" style="height: 100%; width: 100%; margin: 0 !important;">

          <div class="col-5" style="text-align: center; height: 100%;">
            <img src="zebra.png" alt="My Happy SVG" style="width: 40%; height: auto;" />
            <br>
            atheesh27
          </div>
          <div class="col-2" style="text-align: center; color: black; font-size: 2.5rem; display: flex;">
            <span style="margin: auto;">VS</span>
          </div>

          <div class="col-5" style="text-align: center; height: 100%;">
            <img src="puffer-fish.png" alt="My Happy SVG" style="width: 40%; height: auto;" />
            <br>
            <span>
              danushi</span>
          </div>
        </div>
      </div>
      <div class="modal-header" style="background: #234681;">
        <div id="timer" class="info-card">
          <div class="seconds">
            <div class="numbers">
              0
            </div>
            Seconds
          </div>
        </div>
        <div class="game-message-holder">
          You Won !
        </div>
        <div class="info-card">
          <div class="seconds">
            <div class="numbers">
              0
            </div>
            Rounds
          </div>
        </div>
      </div>
      <div class="modal-body" style="border: 1px solid lightgrey; border-width: 0 1px 1px 1px;">
        <div class="options-holder row">
          <div class="col-4">
            <img src="rock.svg" alt="My Happy SVG" />
          </div>
          <div class="col-4">
            <img src="paper.svg" alt="My Happy SVG" />
          </div>
          <div class="col-4">
            <img src="scissor.svg" alt="My Happy SVG" />
          </div>
        </div>
      </div>
      <div class="game-data-btn-holder" style="border: 1px solid lightgrey; border-width: 0 1px 0 1px;">
        <div class="btn-container">
          <div class="left-side" style="background-color: #DC143C;">
            WON
          </div>
          <div class="right-side">
            <div class="new">09</div>
          </div>
        </div>

        <div class="btn-container">
          <div class="left-side" style="background-color:gray;">
            DRAWN
          </div>
          <div class="right-side">
            <div class="new">02</div>
          </div>
        </div>

        <div class="btn-container">
          <div class="left-side" style="background-color: #2980b9;">
            LOST
          </div>
          <div class="right-side">
            <div class="new">01</div>
          </div>
        </div>
      </div>
      <div class="modal-footer" style="justify-content: flex-end; background: #234681; padding: 0 !important;">
        <button class="btn btn-primary btn-round quit-btn" style="width: 100%; float: right; ">
          End Game
        </button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.socket.io/3.1.3/socket.io.min.js"
  integrity="sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh" crossorigin="anonymous"></script>

<script>
  //ui
  var navBarHeight = $(".navbar").height();
  var docHeight = $(document).height();

  var usersRow = $("#users-row");
  var alertHolder = $(".alerts-holder");

  var connectionPool = [];

  $(".body-holder").css("margin-top", navBarHeight);

  var URL = "{{server_url}}";
  var USER_NAME = "{{session.user_name}}";
  var CONNECTION_ID = '';
  var CONNECTION_DATA = null;

  var socket = io(URL, {
    query: {
      user_name: USER_NAME
    },
    reconnection: true,
    reconnectionAttempts: 10
  });

  socket.auth = { username: USER_NAME };
  socket.connect();

  socket.on("connect", function () {
    console.log("new socket id : " + socket.id);

    CONNECTION_ID = socket.id;
  });

  socket.on("greetings", function (data) {
    CONNECTION_DATA = data.data;

    createdAlert = $('<div class="alert alert-success" role="alert">Welcome ' + CONNECTION_DATA.user_name + ' !<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
    alertHolder.append(createdAlert);
  });

  socket.on("connect_error", function (err) {
    console.log("connection error " + err.message);
  });

  socket.on("disconnected-forever", function (message) {
    console.log("disconnected-forever : " + message);
    $("#logout-form").submit();
  });

  socket.on("join-to-game-response", (arg) => {
    console.log("message from room : " + arg); // world
  });

  socket.on("connection-pool-update", function (data) {
    console.log("connection pool updated");

    usersRow.empty();
    connectionPool.length = 0;

    data.pool.forEach(function (item) {

      //update the local connection var
      connectionPool.push({
        connection_id: item.connection_id,
        user_name: item.user_name
      });

      if (item.user_name !== USER_NAME) {
        universalDisabled = CONNECTION_DATA.active_game ? "disabled" : "";

        let onClickFun = universalDisabled.length === 0 ? "challengeAFriend('" + item.user_name + "')" : null;
        let winPercentage = (item.win_amount / item.played_amount) * 100;

        winPercentage = Number.isNaN(winPercentage) ? 0 : Math.round(winPercentage);

        usersRow.append('<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 user-card" id="user-'
          + item.user_name + '"><div class="card text-center"><div class="card-body"><img src="/img/avatar-pack/'
          + item.avatar_name + '" alt="Avatar" class="avatar"><h5 class="card-title">'
          + item.user_name + '</h5><p class="card-text">' + winPercentage + '%</p><a onClick="'
          + onClickFun + '" class="btn btn-success challenge-btn ' + universalDisabled + '">Challenge</a></div></div></div>');

        //update the sent challenge requests
        if (item.challenges.received.includes(USER_NAME)) {

          let userCardBtn = changeTheChallengeBtn(item.user_name, "CHALLENGED");
          userCardBtn.removeClass("btn-success");
          userCardBtn.addClass(universalDisabled.length === 0 ? "btn-secondary" : "btn-secondary disabled");
          userCardBtn.removeAttr('onclick');
        }

        //update the receive challenges
        if (item.challenges.sent.includes(USER_NAME)) {

          let userCardBtn = changeTheChallengeBtn(item.user_name, "ACCEPT");
          userCardBtn.removeClass("btn-success");
          userCardBtn.addClass("btn-danger");

          userCardBtn.removeAttr('onclick');

          if (universalDisabled.length === 0) {
            userCardBtn.on('click', function () {
              responseToAChallenge("accept", item.user_name);
            });
          }
        }

        // disable te challenge option if the player is in a game
        if (item.active_game) {
          let userCardBtn = $("#user-" + item.user_name).find(".challenge-btn")
          userCardBtn.addClass(universalDisabled.length === 0 ? null : "disabled");
          userCardBtn.removeAttr('onclick');
        }
      }
    });


    if (CONNECTION_DATA.active_game) {
      let userNameOfUpdateCard = null;

      switch (CONNECTION_DATA.active_game.role) {
        case "target":
          userNameOfUpdateCard = CONNECTION_DATA.active_game.requester;
          break;
        case "requester":
          userNameOfUpdateCard = CONNECTION_DATA.active_game.target;
          break;
      }

      let userCardBtn = changeTheChallengeBtn(userNameOfUpdateCard, "JOIN GAME");
      userCardBtn.removeClass("btn-danger btn-secondary disabled");
      userCardBtn.addClass("btn-warning");
      userCardBtn.removeAttr('onclick');
    }
  });

  socket.on("old-connection-alert", function (data) {
    console.log("Old connection ended alert : " + JSON.stringify(data));
  });

  //handle the incoming challenge requests
  socket.on("challenge-request", function (data) {

    console.log("challenge request received : " + JSON.stringify(data));

    let challengerUserName = data.challenger.user_name;

    //show the alert
    createdAlert = $('<div class="alert alert-danger" role="alert">' + challengerUserName + ' challenged you !<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
    alertHolder.append(createdAlert);

    //update the user card
    let userCardBtn = changeTheChallengeBtn(challengerUserName, "ACCEPT");
    userCardBtn.removeClass("btn-success");
    userCardBtn.addClass("btn-danger");

    userCardBtn.removeAttr('onclick');

    //add the challenge accept event
    userCardBtn.on('click', function () {
      responseToAChallenge("accept", challengerUserName);
    });

  });

  socket.on("challenge-request-callback", function (data) {

    let status = data.status;
    let targetUserName = data.target_username;
    let message = data.message;

    let alertType = "";

    switch (status) {
      case "success":
        alertType = "success";
        break;
      case "failed":
        alertType = "danger";
        break;
      case "error":
        alertType = "warning";
        break;
    }

    createdAlert = $('<div class="alert alert-' + alertType + '" role="alert">' + message + '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
    alertHolder.append(createdAlert);

    if (targetUserName !== null) {
      let userCardBtn = changeTheChallengeBtn(targetUserName, "CHALLENGED");
      userCardBtn.removeClass("btn-success");
      userCardBtn.addClass("btn-secondary disabled");

      userCardBtn.removeAttr('onclick');
    }
  });

  function logout() {
    socket.emit("logout", { "user_name": USER_NAME, "connection_id": CONNECTION_ID });
    $("#logout-form").submit();
  }

  function challengeAFriend(userName) {
    socket.emit("challenge", { "target_user_name": userName, "requester_user_name": USER_NAME });
  }

  function responseToAChallenge(type, challengerUserName) {
    let responseDataObj = {
      "target_user_name": USER_NAME,
      "requester_user_name": challengerUserName,
      "response": ""
    };

    switch (type) {
      case "accept":
        console.log("challenge accept response received");
        responseDataObj.response = "accept";
        break;
      case "reject":
        console.log("challenge reject response received");
        responseDataObj.response = "reject";
        break;
    }

    socket.emit("challenge-response", responseDataObj);
  }

  socket.on("challenge-response-callback", function (data) {

    let alertType = null;
    let alertMessage = null;

    let changeBtnUserName = null;
    let btnText = null;
    let addClasses = null;
    let onClickFunc = null;

    if (data.target_user.name === USER_NAME) {
      alertMessage = data.target_user.message;
      changeBtnUserName = data.requester_user.name;

    } else if (data.requester_user.name === USER_NAME) {
      alertMessage = data.requester_user.message;
      changeBtnUserName = data.target_user.name;
    }

    switch (data.status) {
      case "accept":
        alertType = "alert-success";
        btnText = "JOIN GAME";
        addClasses = "btn-warning";
        onClickFunc = function () {
          joinToGame();
        }
        break;
      case "reject":
        alertType = "alert-warning";
        btnText = "CHALLENGE";
        addClasses = "btn-success";
        onClickFunc = function () {
          challengeAFriend(changeBtnUserName);
        };
        break;
      case "failed":
        alertType = "alert-danger";
        btnText = "CHALLENGE";
        addClasses = "btn-success";
        onClickFunc = function () {
          challengeAFriend(changeBtnUserName);
        };
        break;
      case "unknown":
        alertType = "alert-danger";
        break;
      default:
        alertType = "alert-light";
    }

    if (btnText) {
      let userCardBtn = changeTheChallengeBtn(changeBtnUserName, btnText);
      userCardBtn.removeClass("btn-danger btn-secondary disabled");
      userCardBtn.addClass(addClasses);

      userCardBtn.removeAttr('onclick');
      userCardBtn.on('click', onClickFunc);
    }

    //show the alert
    createdAlert = $('<div class="alert ' + alertType + '" role="alert">' + alertMessage + '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
    alertHolder.append(createdAlert);

    // update the connection data
    if (data.updated_conn_data) {
      console.log("updated conn data received " + JSON.stringify(data.updated_conn_data));
      CONNECTION_DATA = data.updated_conn_data;
    }
  });

  function changeTheChallengeBtn(targetUserName, btnText) {
    let userCardBtn = $("#user-" + targetUserName).find(".challenge-btn");
    userCardBtn.html(btnText);

    return userCardBtn;
  }

  //change the button text of the user card if the user is in challenge requests list
  function updateTheChallengedUsersCardBtn(challengerId) {

    for (i = 0; i < connectionPool.length; i++) {

      if (connectionPool[i].connection_id === challengerId) {

        let userName = connectionPool[i].user_name;

        createdAlert = $('<div class="alert alert-danger" role="alert">' + userName + ' challenged you !<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>');
        alertHolder.append(createdAlert);

        let userCardBtn = changeTheChallengeBtn(userName, "ACCEPT");

        userCardBtn.removeClass("btn-success");
        userCardBtn.addClass("btn-danger");

        break;
      }
    }
  }

  function joinToGame() {
    console.log("join to game started " + USER_NAME);
    socket.emit("join-game", { "user_name": USER_NAME });
  }
</script>
{{!--
$("#test-room-btn").click(function () {
console.log("test room btn started");
socket.emit("room-test");
}); --}}